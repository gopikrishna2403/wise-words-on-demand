name: Semantic Release

permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'app_factory.py'
      - 'config.py'
      - 'test_app.py'
      - 'requirements*.txt'
      - 'Dockerfile'
      - 'templates/**'
      - 'package.json'
      - '.releaserc.json'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Run linting
        run: |
          flake8 app_factory.py app/ config.py test_app.py --max-line-length=100 --exclude=venv

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build and compile app
        run: |
          echo "Building Flask application..."
          python -c "
          from app_factory import create_app
          app = create_app()
          print('✅ Flask app created successfully')
          print(f'App name: {app.name}')
          print(f'Debug mode: {app.debug}')
          print('✅ App build completed successfully')
          "

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run tests
        run: |
          python -m pytest test_app.py -v --tb=short

      - name: Test app factory
        run: |
          python -c "from app_factory import create_app; app = create_app(); print('App factory test passed')"

  release:
    needs: [lint, build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      new-release-published: ${{ steps.release.outputs.new-release-published }}
      new-release-version: ${{ steps.release.outputs.new-release-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Semantic Release
        id: semantic-release
        uses: open-turo/actions-python/release@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  docker-build-push:
    needs: [release]
    runs-on: ubuntu-latest
    if: needs.release.outputs.version != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name wisewordsdevacr

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: wisewordsdevacr.azurecr.io/wise-words-webapp
          tags: |
            type=raw,value=webapp-${{ needs.release.outputs.new-release-version }}
            type=raw,value=webapp-${{ needs.release.outputs.new-release-version }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ needs.release.outputs.new-release-version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
